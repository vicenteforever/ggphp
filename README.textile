h1. ggphp framework
仅提供框架结构和思路，除了一些基本的规则，具体项目不耦合与核心框架，没有过多的框架限制，可以根据你自己的需求自由扩展

h2. 系统框架核心目录
核心目录名为ggphp_core ，可放于系统任意位置，所有项目共用此目录，系统框架的根目录在程序中用常量GG_DIR表示，如果想实现所有应用通用的模块，请将代码放在此目录下。根据.htaccess存取规则，框架目录下的文件不可以被用户直接访问。

h2. 项目应用目录
每个具体的项目应用目录可放在你的wwwroot下的任意位置，项目目录在程序中用常量APP_DIR表示，建立一个新项目可用blank目录复制出一份。

h2. APP_DIR/src

每个应用目录下都应该有src目录存放您的程序文件(php)，根据.htaccess存取规则，该目录不可以被客户直接调用。

h2. 项目入口文件-

项目目录下的index.php为项目的单一入口文件，如果把项目文件放于其他目录，需要修改index.php文件指定框架的目录位置：require("您的位置/ggphp_core/gg.php");。

h2. 项目根目录下的.htaccess文件

url重写配置，可实现简洁url，当web服务器找不到url对应的文件，就会调用index.php进入程序，如果存在资源，可直接调用该资源，利用这一特性可实现高性能的缩略图缓存等特性。

h2. 命名空间和类的自动装载

开发一个多人合作的大型应用，命名空间是一个很重要的特性。ggpph使用PEAR的类命名规则，根据类文件所在目录进行命名：类名 = 子目录_子目录_类名称，具有以上方式命名的类能够自动装载，无需手动调用include或者require。例如：当调用类名为storage_adapter_file的时候根据autoload的规则，框架首先搜索APP_DIR/app/storage/adapter/file.php文件，并include进来。若该文件不存在，再次搜寻GG_DIR/storage/adapter/file.php文件关于该类的实现。

h2. 第三方类库的加载

第三方类库通常不以上一条的命名规则，若实现这些类库的加载，可以考虑一下两种方式：1.直接include加载。2.建立一个以规则命名的类工厂，返回加载的类。例如
定义：
class mylib_image{
	static function load(){
		static $loaded;
		if(!isset($loaded)){
			$loaded = true;
			$dir = dirname(__FILE__);
			include($dir.DS."easyphpthumbnail.class.php");
		}
		return new easyphpthumbnail();
	}
}
使用：
$image = mylib_image::load();


h2. 模块(控制器)->方法(controller->action)

每个应用分为若干个模块，每个url调用都会用一个模块控制器->方法来负责执行。
一个模块都是module目录下的一个子目录，一个模块控制器文件名为controller.php,类名称为module_模块名称_controller，可以在url中直接调用的模块控制器的方法默认的前缀是'do'，也可以在config/app.php中改为其他前缀。该方法返回的值将输出到浏览器。
框架目录下的模块对于每个应用都有效，每个应用下的模块只对当前应用有效。模块可以从框架目录挪到应用目录或者从应用目录挪到框架目录。
例如：有这样一个模块控制器和方法
路径:appname/src/module/blog/controller.php
class module_blog_controller{
	function doView(){
		$id = param(1);
		return "current blog id: {$id}";
	}
}

h2. url规则


一个url对应的是一个模块控制器->控制器方法的执行，
有如下几种url调用方式：

1.简洁url: http://{主机名称}/{应用路径}/{模块名称}/{模块控制器方法名称}/参数1/.../参数n
此例中：http://localhost/myapp/blog/view/1 

2.传统url:http://{主机名称}/{应用路径}/index.php?controller={模块名称}&action={模块控制器方法名称}
此例中: http://localhost/myapp/index.php?controller=blog&action=view&arg[]=1
注意：若要与简洁url兼容的方式以序号获取参数，需要在url中这样表示&arg[]=param1&arg[]=param2

3.基于正则表达式的路由规则的url:根据配置文件config/router.php里的正则表达式来调用对应的控制器->方法。例如：配置文件中有这样一条路由规则：
"/^blog_(\d+)\.html$/" => array('controller'=>'blog', 'action'=>'view')
此例中：http://localhost/myapp/blog_1.html
其中正则表达式中的子表达式(括号内的内容)为序号参数传递给框架。程序中以同样的方式访问：$id=param(1);

传统的以GET方法传递参数依然有效，例如:http://localhost/myapp/blog/list?page=1

若在url解析不出对应的控制器（GG_DIR/controller和APP_DIR/app/controller中均不存在对应的"控制器.php"），就会以config/app.php中的配置的默认控制器和默认方法来执行。也就是说当使用默认控制器时,可以不指定控制器
例如: http://localhost/myapp/default/index 可以简化为
http://localhost/myapp/ 对应执行 controller_default->doIndex()方法
http://localhost/myapp/default/view 可以简化为
http://localhost/myapp/view 对应执行 controller_default->doView()方法

若要进行SEO优化，建议使用简洁url和url路由。

h2. 框架核心函数库

为了简化代码书写，框架中会经常使用的函数调用包装成简短的函数放在GG_DIR/function.php中，具体函数请查看源文件。

h2. 项目函数库

对于项目在开发过程中经常使用的函数调用，可以包装成简洁的函数放到APP_DIR/app/function.php中，该文件存在的话，系统会自动加载该文件

h2. 模型(model)

以类命名规则命名类名称和相应目录文件存放即可，无其他限制
例如：
文件：APP_DIR/app/model/user.php
定义：class model_user{
	function load(){}
}
使用：
$user = new model_user();
$user->load();


h2. 视图(view)

可直接使用php作为模板文件放到APP_DIR/app/view目录下
框架将$data变量传递给模板文件，模板中可以直接使用此变量
例如<?php echo $data['title']?>
调用模板的方式为：
view('模板名称.php', array('title'=>'mytitle', 'content'=>'mycontent'));
模板的嵌套：
$data['header'] = view('header');
$data['body'] = view('body', $bodydata);
$data['footer'] = view('footer');
echo view('html', $data);
模板搜索次序规则：
1.APP_DIR/app/view/{current_controller_name}/{template_name}.php
2.APP_DIR/app/view/{template_name}.php
3.GG_DIR/view/{template_name}.php
另外php模板可使用框架全部功能，当然你还可以使用你最熟悉的模板系统将其集成到框架中来。


h2. 灵活的配置文件

配置文件同样分为和当前应用配置和框架基本配置，例如数据库的配置文件为APP_DIR/app/config/database.php 和 GG_DIR/config/database.php
一个配置文件需要返回一个关联数组，读取配置的时候会将应用的配置与框架配置的进行关联数组合并，两个配置针对同一配置项目都进行设置的时候以应用配置为优先。
通常情况下只读的配置文件直接使用php数组返回：
<?php
return array(
	'x' => 'xxxxx',
	'y' => 'yyyyy',
	'z' => 'zzzzz',
);
?>

当然你也可以在此文件中从一个持久化存储中读取文件并返回数组来实现多重多样的配置文件系统。例如：
<?php
//从文件中载入配置
return storage('file', 'database')->load();
?>

配置文件的读取使用config函数：config($config_file, $key) 
如果第二个参数不指定则返回此配置文件的数组。
例如：
从config/app.php中读取default_action
$defaultController = config('app', 'default_controller');
$defaultAction = config('app', 'default_action');
读取config/database.php的test段数据库的配置(文件中可以存在多个数据库配置)：
$config = config('database', 'test')
$pdo = new PDO($config['DSN'], $config['username'], $config['password'], $config['driver_opts']);

h2. 数据库

使用pdo函数进行数据库链接 pdo($config_dbname)
例如：
pdo()->query($sql); //使用默认的default段数据库库配置
pdo('test')->query($sql);//使用配置中的test段配置连接数据库
pdo函数可多次调用，每个指定的配置仅在第一次调用的时候进行连接。其余的调用仅仅返回第一次创建的pdo对象。比设计模式中的单例模式更灵活。

h2. 多语言

翻译文件：GG_DIR/language/{语言代码}.php 和 APP_DIR/language/{语言代码}.php
与配置文件类似，若存在相同的条目，应用目录的翻译优先于框架目录的翻译
翻译函数：t($str, $language);
若不指定第二个参数,系统会读取当前会话中的当前语言变量来进行翻译。当前语言优先级为参数中的param('lang') > $_SESSION['lang'] > {浏览器当前语言}

h2. ORM

集成phpDataMapper,并扩展字段类，提供字段校验 widget生成等。
@todo: